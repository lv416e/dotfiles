# ============================================================================
# Performance Profiling (uncomment when benchmarking)
# ============================================================================
# zmodload zsh/zprof

# ============================================================================
# Core Initialization
# ============================================================================

# --- Homebrew ---
{{- if eq .chezmoi.arch "arm64" }}
export HOMEBREW_PREFIX="/opt/homebrew"
export HOMEBREW_CELLAR="/opt/homebrew/Cellar"
export HOMEBREW_REPOSITORY="/opt/homebrew"
fpath[1,0]="/opt/homebrew/share/zsh/site-functions"
eval "$(/usr/bin/env PATH_HELPER_ROOT="/opt/homebrew" /usr/libexec/path_helper -s)"
[ -z "${MANPATH-}" ] || export MANPATH=":${MANPATH#:}"
export INFOPATH="/opt/homebrew/share/info:${INFOPATH:-}"
{{- else }}
eval "$(/usr/local/bin/brew shellenv)"
HOMEBREW_PREFIX="/usr/local"
{{- end }}

# --- Prompt ---
export PROMPT_THEME="${PROMPT_THEME:-p10k}"

if [[ "$PROMPT_THEME" == "p10k" ]]; then
  # Bypass expensive SSH detection by setting P9K_SSH before theme loads
  # This prevents the 12-17ms overhead from _p9k_init_ssh
  typeset -g P9K_SSH=0

  if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
  fi
fi

if [[ "$PROMPT_THEME" == "starship" ]]; then
  eval "$(starship init zsh)"
  export STARSHIP_CONFIG=~/.config/starship.toml
elif [[ "$PROMPT_THEME" == "p10k" ]]; then
  source ~/powerlevel10k/powerlevel10k.zsh-theme
  [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
fi

# ============================================================================
# Tool Configuration
# ============================================================================

# --- FZF ---
# FZF environment variables deferred - set before key bindings load
# (saves ~1ms at startup)

# --- zsh-autosuggestions ---
export ZSH_AUTOSUGGEST_MANUAL_REBIND=1
export ZSH_AUTOSUGGEST_USE_ASYNC=1
export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'  # Gray color for suggestions
export ZSH_AUTOSUGGEST_STRATEGY=(history completion)

# --- sheldon (plugin manager with cache) ---
_sheldon_cache="${XDG_CACHE_HOME:-$HOME/.cache}/sheldon/sheldon.zsh"
_sheldon_toml="${XDG_CONFIG_HOME:-$HOME/.config}/sheldon/plugins.toml"
if [[ ! -r "$_sheldon_cache" || "$_sheldon_toml" -nt "$_sheldon_cache" ]]; then
  mkdir -p "${_sheldon_cache:h}"
  sheldon source > "$_sheldon_cache"
fi
source "$_sheldon_cache"
unset _sheldon_cache _sheldon_toml

# --- Completion system (cached, deferred) ---
_load_completion() {
  autoload -Uz compinit
  local _comp_path="${ZDOTDIR:-$HOME}/.zcompdump"
  if [[ -n $_comp_path(#qNmh-24) ]]; then
    compinit -C -u -d "$_comp_path"
  else
    compinit -u -d "$_comp_path"
  fi
}
zsh-defer _load_completion

# --- mise shims (immediate, for non-interactive shells like Zellij) ---
# Must be loaded BEFORE zsh-defer to ensure tools are available immediately
# in non-interactive contexts (Zellij panes, IDEs, scripts)
if command -v mise >/dev/null 2>&1; then
  eval "$(mise activate zsh --shims)"
fi

# --- Deferred tool initialization ---
zsh-defer -c 'eval "$(zoxide init --cmd j zsh)"'
zsh-defer -c 'eval "$(atuin init zsh)"'
# mise activate (full features) - deferred for interactive shells
# Note: mise shims are already loaded above for immediate PATH access
zsh-defer -c 'eval "$(mise activate zsh)"'

# --- FZF key bindings ---
if [[ -f "${HOMEBREW_PREFIX}/opt/fzf/shell/key-bindings.zsh" ]]; then
  zsh-defer -c 'export FZF_DEFAULT_COMMAND="fd --type f --hidden --follow --exclude .git"
export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border --preview \"bat --color=always --style=numbers --line-range=:500 {}\""
source "${HOMEBREW_PREFIX}/opt/fzf/shell/key-bindings.zsh"'
fi
if [[ -f "${HOMEBREW_PREFIX}/opt/fzf/shell/completion.zsh" ]]; then
  zsh-defer source "${HOMEBREW_PREFIX}/opt/fzf/shell/completion.zsh"
fi

# --- Amazon Q (deferred, optional) ---
# zsh-defer -c '[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh" ]] && builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh"'
zsh-defer -c '[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh" ]] && builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh"'

# ============================================================================
# Environment Variables
# ============================================================================

# --- Development tools ---
export PATH="{{ .chezmoi.homeDir }}/.slack/bin:$PATH"
# Cargo bin already added in .zshenv via '. "$HOME/.cargo/env"'
export PATH="${HOMEBREW_PREFIX}/opt/gnu-time/libexec/gnubin:$PATH"
export PATH="${HOMEBREW_PREFIX}/opt/llvm/bin:$PATH"

# --- C++ Development (LLVM/Clang) ---
# Deferred to save ~2ms at startup - only loaded when needed
_setup_cpp_env() {
  export CC="${HOMEBREW_PREFIX}/opt/llvm/bin/clang"
  export CXX="${HOMEBREW_PREFIX}/opt/llvm/bin/clang++"
  export SDKROOT="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk"
  export CFLAGS="-isysroot ${SDKROOT}"
  export CXXFLAGS="-isysroot ${SDKROOT}"
  export LDFLAGS="-L${HOMEBREW_PREFIX}/opt/llvm/lib/c++ -Wl,-rpath,${HOMEBREW_PREFIX}/opt/llvm/lib/c++"
}
# Defer C++ environment setup - will be loaded after prompt
zsh-defer _setup_cpp_env

# --- Alacritty custom scripts ---
# Custom scripts like toggle_opacity
export PATH=$PATH:{{ .chezmoi.homeDir }}/.config/alacritty/bin

# ============================================================================
# Aliases
# ============================================================================

# --- Editor ---
alias vim='nvim'
alias vi='nvim'
alias v='nvim'

# --- File operations (eza) ---
alias e='eza --icons --git --sort=type'
alias l=e
alias ls=e
alias ea='eza -a --icons --git --sort=type'
alias la=ea
alias ee='eza -aahl --icons --git --sort=type'
alias ll=ee
alias et='eza -T -L 3 -a -I "node_modules|.git|.cache" --icons --sort=type'
alias lt=et
alias eta='eza -T -a -I "node_modules|.git|.cache" --color=always --icons --sort=type | less -r'
alias lta=eta

# --- Modern CLI tools ---
alias cat='bat --paging=never'
alias less='bat'
alias grep='rg -S'
alias -g G='| rg -S'
alias top='btm'
alias bottom='btm'
alias du='dust'
alias df='duf'
alias ps='procs --tree'
alias rm='trash'

# --- Navigation ---
alias d='cd ~/Documents'
alias dot='cd ~/.local/share/chezmoi'
alias obs='cd ~/Google\ Drive/My\ Drive/obsidian/'
alias ..1='cd ../'
alias ..2='cd ../../'
alias ..3='cd ../../../'
alias ..4='cd ../../../../'

# --- History ---
alias h1='history -100 | tail -r | bat -l sh'
alias h10='history -1000 | tail -r | bat -l sh'

# --- Multiplexer Workspaces (abstracted) ---
alias twork='mux-work'       # Multiplexer-agnostic (was tmux-work)
alias tw='mux-work'          # Short form
alias tcc='mux-claude'       # Multiplexer-agnostic (was tmux-claude)
alias tc='mux-claude'        # Short form
alias tvim='mux-nvim'        # Multiplexer-agnostic (was tmux-nvim)
alias tv='mux-nvim'          # Short form
alias tnu='mux-nu'           # Multiplexer-agnostic (was tmux-nu)
alias tn='mux-nu'            # Short form
alias twk='mux-kill-window'  # Multiplexer-agnostic window kill

# --- Tmux-specific (when you explicitly need tmux) ---
alias tmux-health='tmux list-panes -a -F "Pane #{pane_id}: #{history_size}/#{history_limit} lines"'

# --- Nushell ---
alias nu='nu'
alias nuscript='nu -c'
alias vnu='chezmoi edit ~/.config/nushell/config.nu'

# --- Chezmoi ---
alias vzsh='chezmoi edit ~/.zshrc'
alias vbrew='chezmoi edit ~/.Brewfile'
alias szsh='source ~/.zshrc'
alias cdot='chezmoi cd'
alias adot='chezmoi apply'

# --- Claude Code ---
alias ai='claude'

# --- Git ---
alias lg='gitui'
alias ld='lazydocker'

# --- Repository shortcuts ---
alias rt='repo -t'
alias rt2='repo -t2'
alias rtd='repo -t2'

# --- Misc ---
alias c='clear'
alias cl='tty-clock -sc'
alias tenki='http wttr.in/Tokyo'
alias zsh-bench='for i in $(seq 1 20); do time zsh -i -c exit; done'

# ============================================================================
# Functions - Utilities
# ============================================================================

# 1Password sign in
# Usage: ops
ops() {
  eval $(op signin)
}

# Cheat sheet viewer (navi + tldr)
# Usage:
#   ch           - Interactive navi (all cheatsheets)
#   ch <command> - Interactive navi with query
#   cht <command> - Direct tldr lookup (non-interactive)
ch() {
  if [[ $# -eq 0 ]]; then
    navi
  else
    navi --query "$*"
  fi
}
# Direct tldr lookup (non-interactive)
cht() { navi --tldr "$*" }
# Legacy cheat implementation (uncomment if needed):
# ch() { cheat $* | bat -l sh }

# Code search with bat
agg() { ag $* | bat -l sh }

# JSON grep
jgrep() { jq | gron | grep $* | gron -u }

# History utilities
hg() { history -1000 | grep $* | tail -r | bat -l sh }
hc() { history -1000 | awk -v cmd="$1" '$1 == cmd { $1=""; sub(/^ +/, ""); print; exit }' | tr -d '\n' | pbcopy }

# Claude ask with multi-line support
ask() {
  if [[ $# -eq 0 ]]; then
    echo "Enter your prompt (press Ctrl+D on a new line to finish):"
    local input="$(cat)"
    [[ -n "$input" ]] && claude -p "$input"
  else
    claude -p "$*"
  fi
}

# ============================================================================
# Functions - Shell Management
# ============================================================================

# Note: twk is now an alias to mux-kill-window (see aliases section above)

# Clear zsh caches and restart
zsh-refresh() {
  echo "Clearing sheldon cache..."
  command rm -f "${XDG_CACHE_HOME:-$HOME/.cache}/sheldon/sheldon.zsh"
  echo "Clearing completion cache..."
  command rm -f "${ZDOTDIR:-$HOME}/.zcompdump"
  echo "Restarting zsh..."
  exec zsh
}

# Switch between Starship and Powerlevel10k
switch-prompt() {
  local theme="${1:-}"
  local zshenv_local="${ZDOTDIR:-$HOME}/.zshenv.local"

  if [[ -z "$theme" ]]; then
    echo "Current prompt: $PROMPT_THEME"
    echo ""
    echo "Usage: switch-prompt [starship|p10k]"
    echo ""
    echo "Performance (zsh-bench):"
    echo "  P10k:     first_prompt=45.9ms, command=42.9ms  (faster)"
    echo "  Starship: first_prompt=83.5ms, command=83.8ms  (cross-shell)"
    return 0
  fi

  if [[ "$theme" != "starship" && "$theme" != "p10k" ]]; then
    echo "Error: theme must be 'starship' or 'p10k'" >&2
    return 1
  fi

  echo "# Prompt theme override (managed by switch-prompt command)" > "$zshenv_local"
  echo "export PROMPT_THEME=$theme" >> "$zshenv_local"

  echo "✅ Prompt switched to: $theme"
  echo "📝 Saved to: ~/.zshenv.local (not in chezmoi)"
  echo "🔄 Restarting zsh..."
  exec zsh
}

# Switch between tmux and zellij
switch-multiplexer() {
  local mux="${1:-}"
  local chezmoi_config="${HOME}/.local/share/chezmoi/.chezmoi.toml.tmpl"

  if [[ -z "$mux" ]]; then
    # Show current configuration
    local current_mux=$(grep 'multiplexer' "$chezmoi_config" 2>/dev/null | sed 's/.*"\(.*\)".*/\1/')
    echo "Current multiplexer: ${current_mux:-tmux}"
    echo ""
    echo "Usage: switch-multiplexer [tmux|zellij]"
    echo ""
    echo "Available multiplexers:"
    echo "  tmux     - Traditional terminal multiplexer (default)"
    echo "             Mature, stable, extensive ecosystem"
    echo "             Ctrl+g prefix (custom)"
    echo ""
    echo "  zellij   - Modern Rust-based multiplexer"
    echo "             Built-in UI, WebAssembly plugins"
    echo "             Ctrl+g prefix (matches tmux)"
    return 0
  fi

  if [[ "$mux" != "tmux" && "$mux" != "zellij" ]]; then
    echo "Error: multiplexer must be 'tmux' or 'zellij'" >&2
    return 1
  fi

  # Update .chezmoi.toml.tmpl
  if [[ ! -f "$chezmoi_config" ]]; then
    echo "Error: chezmoi config not found at $chezmoi_config" >&2
    return 1
  fi

  # Use sed to update the multiplexer value
  sed -i '' "s/multiplexer = \".*\"/multiplexer = \"$mux\"/" "$chezmoi_config"

  echo "✅ Multiplexer switched to: $mux"
  echo "📝 Updated: ~/.local/share/chezmoi/.chezmoi.toml.tmpl"
  echo "🔄 Regenerating config..."

  # Regenerate config from template
  chezmoi init > /dev/null 2>&1

  echo "🔄 Applying terminal emulator configs..."

  # Apply terminal emulator configurations
  chezmoi apply ~/.config/alacritty/alacritty.toml > /dev/null 2>&1
  chezmoi apply ~/.config/kitty/kitty.conf > /dev/null 2>&1
  chezmoi apply ~/.config/ghostty/config > /dev/null 2>&1

  echo "💡 Restart your terminal emulator to use $mux"
  echo "   Or run: exec zsh"
}

# Switch between modular and monolithic zsh configuration
# Similar to LazyVim/AstroNvim or Starship/P10k switching
switch-zsh-config() {
  local variant="${1:-}"
  local chezmoi_config="${HOME}/.local/share/chezmoi/.chezmoi.toml.tmpl"

  if [[ -z "$variant" ]]; then
    # Show current configuration
    local current_variant=$(grep -A1 '^\[data\.zsh\]' "$chezmoi_config" 2>/dev/null | grep 'variant' | sed 's/.*"\(.*\)".*/\1/')
    echo "Current zsh configuration: ${current_variant:-modular}"
    echo ""
    echo "Usage: switch-zsh-config [modular|monolithic]"
    echo ""
    echo "Available variants:"
    echo "  modular     - Optimized multi-file config with deferred loading (default)"
    echo "                Performance: 48.7ms min, 55.1ms avg"
    echo "                Structure: ~/.config/zsh/conf.d/ (7 modules)"
    echo ""
    echo "  monolithic  - Traditional single-file config (legacy)"
    echo "                Performance: ~57ms baseline"
    echo "                Structure: Single ~/.zshrc file"
    return 0
  fi

  if [[ "$variant" != "modular" && "$variant" != "monolithic" ]]; then
    echo "Error: variant must be 'modular' or 'monolithic'" >&2
    return 1
  fi

  # Update .chezmoi.toml.tmpl
  if [[ ! -f "$chezmoi_config" ]]; then
    echo "Error: chezmoi config not found at $chezmoi_config" >&2
    return 1
  fi

  # Use sed to update the variant value
  sed -i '' "s/variant = \".*\"/variant = \"$variant\"/" "$chezmoi_config"

  echo "✅ Zsh configuration switched to: $variant"
  echo "📝 Updated: ~/.local/share/chezmoi/.chezmoi.toml.tmpl"
  echo "🔄 Regenerating config..."

  # Regenerate config from template
  chezmoi init > /dev/null 2>&1

  echo "🔄 Applying changes..."

  # Apply changes
  chezmoi apply ~/.config/zsh/.zshrc > /dev/null 2>&1

  echo "🔄 Restarting zsh..."
  exec zsh
}

# ============================================================================
# Functions - Repository Management
# ============================================================================

# Repository navigation with fzf and tmux integration
repo() {
  local launch_tmux=false
  local top_panes="${TOP_PANES:-1}"
  local repo_arg=""

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --tmux|-t)
        launch_tmux=true
        shift
        ;;
      -t2)
        launch_tmux=true
        top_panes=2
        shift
        ;;
      --dual)
        top_panes=2
        shift
        ;;
      *)
        repo_arg="$1"
        shift
        ;;
    esac
  done

  local repo=""

  if [ -n "$repo_arg" ]; then
    local matched=$(ghq list | grep -i "$repo_arg" | head -1)
    if [ -n "$matched" ]; then
      repo="$matched"
    else
      echo "No repository matching '$repo_arg' found" >&2
      echo "Available repositories:" >&2
      ghq list | grep -i "$repo_arg" >&2
      return 1
    fi
  else
    repo=$(ghq list | fzf --preview "bat --color=always --style=header,grid $(ghq root)/{}/README.md 2>/dev/null || eza -al --tree --level=2 $(ghq root)/{}")
  fi

  if [ -n "$repo" ]; then
    local repo_path=$(ghq root)/$repo

    if [ "$launch_tmux" = true ]; then
      local repo_name=$(basename "$repo")
      LEFT_DIR="$repo_path" TOP_PANES="$top_panes" mux-nvim "$repo_name"
    else
      cd "$repo_path"
    fi
  fi
}

# Clone repository with ghq
clone() {
  if [ -z "$1" ]; then
    echo "Usage: clone <repo-url>" >&2
    echo "Example: clone github.com/anthropics/claude-code" >&2
    return 1
  fi
  ghq get "$1" && cd $(ghq root)/$(ghq list | tail -1)
}

# Repository navigation with tmux-nvim
tmux-repo() {
  local repo_path=""
  local repo_name=""
  local top_panes="${TOP_PANES:-1}"
  local repo_arg=""

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --dual|-2)
        top_panes=2
        shift
        ;;
      *)
        repo_arg="$1"
        shift
        ;;
    esac
  done

  if [ -n "$repo_arg" ]; then
    local matched=$(ghq list | grep -i "$repo_arg" | head -1)
    if [ -n "$matched" ]; then
      repo_path=$(ghq root)/$matched
      repo_name=$(basename "$matched")
    else
      echo "No repository matching '$repo_arg' found" >&2
      return 1
    fi
  else
    local current_path=$(pwd)
    local ghq_root=$(ghq root)

    if [[ "$current_path" == "$ghq_root"* ]]; then
      repo_path="$current_path"
      repo_name=$(basename "$current_path")
    else
      local repo=$(ghq list | fzf --preview "bat --color=always --style=header,grid $(ghq root)/{}/README.md 2>/dev/null || eza -al --tree --level=2 $(ghq root)/{}")
      if [ -n "$repo" ]; then
        repo_path=$(ghq root)/$repo
        repo_name=$(basename "$repo")
      else
        return 0
      fi
    fi
  fi

  if [ -n "$repo_path" ]; then
    echo "Warning: tmux-repo is deprecated. Use 'mux-repo' or 'repo -t' instead." >&2
    LEFT_DIR="$repo_path" TOP_PANES="$top_panes" mux-nvim "$repo_name"
  fi
}

# Repository statistics
ghq-stats() {
  echo "Total repositories: $(ghq list | wc -l | tr -d ' ')"
  echo "GitHub: $(ghq list | grep github.com | wc -l | tr -d ' ')"
  echo "GitLab: $(ghq list | grep gitlab.com | wc -l | tr -d ' ')"
  echo "Bitbucket: $(ghq list | grep bitbucket.org | wc -l | tr -d ' ')"
  echo ""
  echo "Most recently updated repositories:"
  ghq list --full-path | head -5 | while read repo_path; do
    local last_commit=$(git -C "$repo_path" log -1 --format='%ar' 2>/dev/null || echo "unknown")
    echo "  $(basename $repo_path): $last_commit"
  done
}

# ============================================================================
# Completions
# ============================================================================

_repo() {
  _arguments \
    '(-t --tmux)'{-t,--tmux}'[Launch tmux-nvim with 1 pane]' \
    '-t2[Launch tmux-nvim with 2 panes]' \
    '--dual[Use 2 panes layout]' \
    '1:repository:_repo_list'
}

_repo_list() {
  local -a repos
  repos=(${(f)"$(ghq list 2>/dev/null)"})
  _describe -t repos 'ghq repositories' repos
}

_register_repo_completion() {
  if (( $+functions[compdef] )); then
    compdef _repo repo
    compdef _repo rt
    compdef _repo rt2
    compdef _repo rtd
  fi
}
zsh-defer _register_repo_completion

# ============================================================================
# Performance Profiling (uncomment when benchmarking)
# ============================================================================
# zprof | head -40
