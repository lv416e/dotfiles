# ============================================================================
# Environment Variables
# Description: PATH configuration and development environment setup
# Dependencies: HOMEBREW_PREFIX (from 01-init.zsh)
# ============================================================================

# --- Critical PATH (needed immediately) ---
# Empty for now - all PATHs can be deferred

# --- Deferred PATH additions ---
# These development tools are rarely needed immediately at shell startup
_setup_dev_paths() {
  export PATH="{{ .chezmoi.homeDir }}/.slack/bin:$PATH"
  # Cargo bin already added in .zshenv via '. "$HOME/.cargo/env"'
  export PATH="${HOMEBREW_PREFIX}/opt/gnu-time/libexec/gnubin:$PATH"
  export PATH="${HOMEBREW_PREFIX}/opt/llvm/bin:$PATH"

  # Alacritty + Hammerspoon
  DOTDIR='{{ .chezmoi.homeDir }}/dotfiles'
  export PATH=$PATH:$DOTDIR/.config/alacritty/bin
}
zsh-defer _setup_dev_paths

# --- C++ Development (LLVM/Clang) ---
# Deferred to save ~2ms at startup - only loaded when needed
_setup_cpp_env() {
  export CC="${HOMEBREW_PREFIX}/opt/llvm/bin/clang"
  export CXX="${HOMEBREW_PREFIX}/opt/llvm/bin/clang++"
  export SDKROOT="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk"
  export CFLAGS="-isysroot ${SDKROOT}"
  export CXXFLAGS="-isysroot ${SDKROOT}"
  export LDFLAGS="-L${HOMEBREW_PREFIX}/opt/llvm/lib/c++ -Wl,-rpath,${HOMEBREW_PREFIX}/opt/llvm/lib/c++"
}
# Defer C++ environment setup - will be loaded after prompt
zsh-defer _setup_cpp_env

# ============================================================================
# Shell Management Functions (Critical - Must Load Immediately)
# ============================================================================
# These functions manage shell configuration and must be available immediately.
# They cannot be deferred because they're needed for interactive shell management.
# Dependencies: chezmoi, sed, tmux (optional)
# ============================================================================

# Kill current tmux window
twk() {
  local id
  id="$(tmux display -p '#{window_id}' 2>/dev/null)" || {
    echo "Run inside tmux session" >&2; return 1
  }
  tmux kill-window -t "$id"
}

# Clear zsh caches and restart
zsh-refresh() {
  echo "Clearing sheldon cache..."
  rm -f "${XDG_CACHE_HOME:-$HOME/.cache}/sheldon/sheldon.zsh"
  echo "Clearing completion cache..."
  rm -f "${ZDOTDIR:-$HOME}/.zcompdump"
  echo "Restarting zsh..."
  exec zsh
}

# Switch between Starship and Powerlevel10k
switch-prompt() {
  local theme="${1:-}"
  local zshenv_local="${ZDOTDIR:-$HOME}/.zshenv.local"

  if [[ -z "$theme" ]]; then
    echo "Current prompt: $PROMPT_THEME"
    echo ""
    echo "Usage: switch-prompt [starship|p10k]"
    echo ""
    echo "Performance (zsh-bench):"
    echo "  P10k:     first_prompt=45.9ms, command=42.9ms  (faster)"
    echo "  Starship: first_prompt=83.5ms, command=83.8ms  (cross-shell)"
    return 0
  fi

  if [[ "$theme" != "starship" && "$theme" != "p10k" ]]; then
    echo "Error: theme must be 'starship' or 'p10k'" >&2
    return 1
  fi

  echo "# Prompt theme override (managed by switch-prompt command)" > "$zshenv_local"
  echo "export PROMPT_THEME=$theme" >> "$zshenv_local"

  echo "✅ Prompt switched to: $theme"
  echo "📝 Saved to: ~/.zshenv.local (not in chezmoi)"
  echo "🔄 Restarting zsh..."
  exec zsh
}

# Switch between modular and monolithic zsh configuration
# Similar to LazyVim/AstroNvim or Starship/P10k switching
switch-zsh-config() {
  local variant="${1:-}"
  local chezmoi_config="${HOME}/.local/share/chezmoi/.chezmoi.toml.tmpl"

  if [[ -z "$variant" ]]; then
    # Show current configuration
    local current_variant=$(grep -A1 '^\[data\.zsh\]' "$chezmoi_config" 2>/dev/null | grep 'variant' | sed 's/.*"\(.*\)".*/\1/')
    echo "Current zsh configuration: ${current_variant:-modular}"
    echo ""
    echo "Usage: switch-zsh-config [modular|monolithic]"
    echo ""
    echo "Available variants:"
    echo "  modular     - Optimized multi-file config with deferred loading (default)"
    echo "                Performance: 48.7ms min, 55.1ms avg"
    echo "                Structure: ~/.config/zsh/conf.d/ (7 modules)"
    echo ""
    echo "  monolithic  - Traditional single-file config (legacy)"
    echo "                Performance: ~57ms baseline"
    echo "                Structure: Single ~/.zshrc file"
    return 0
  fi

  if [[ "$variant" != "modular" && "$variant" != "monolithic" ]]; then
    echo "Error: variant must be 'modular' or 'monolithic'" >&2
    return 1
  fi

  # Update .chezmoi.toml.tmpl
  if [[ ! -f "$chezmoi_config" ]]; then
    echo "Error: chezmoi config not found at $chezmoi_config" >&2
    return 1
  fi

  # Use sed to update the variant value
  sed -i '' "s/variant = \".*\"/variant = \"$variant\"/" "$chezmoi_config"

  echo "✅ Zsh configuration switched to: $variant"
  echo "📝 Updated: ~/.local/share/chezmoi/.chezmoi.toml.tmpl"
  echo "🔄 Applying changes with chezmoi..."

  # Apply changes
  chezmoi apply ~/.config/zsh/.zshrc

  echo "🔄 Restarting zsh..."
  exec zsh
}
