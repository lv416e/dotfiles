# ============================================================================
# Environment Variables
# Description: PATH configuration and development environment setup
# Dependencies: HOMEBREW_PREFIX (from 01-init.zsh)
# ============================================================================

# --- Critical PATH (needed immediately) ---
# Empty for now - all PATHs can be deferred

# --- Helper function: Add to PATH only if not present ---
_add_to_path_prepend() {
  [[ ":$PATH:" != *":$1:"* ]] && export PATH="$1:$PATH"
}

_add_to_path_append() {
  [[ ":$PATH:" != *":$1:"* ]] && export PATH="$PATH:$1"
}

# --- Deferred PATH additions ---
# These development tools are rarely needed immediately at shell startup
_setup_dev_paths() {
  _add_to_path_prepend "{{ .chezmoi.homeDir }}/.slack/bin"
  # Cargo bin already added in .zshenv via '. "$HOME/.cargo/env"'
  _add_to_path_prepend "${HOMEBREW_PREFIX}/opt/gnu-time/libexec/gnubin"
  _add_to_path_prepend "${HOMEBREW_PREFIX}/opt/llvm/bin"

  # Alacritty custom scripts (toggle_opacity, etc.)
  _add_to_path_append "{{ .chezmoi.homeDir }}/.config/alacritty/bin"
}
zsh-defer _setup_dev_paths

# --- C++ Development (LLVM/Clang) ---
# Deferred to save ~2ms at startup - only loaded when needed
_setup_cpp_env() {
  export CC="${HOMEBREW_PREFIX}/opt/llvm/bin/clang"
  export CXX="${HOMEBREW_PREFIX}/opt/llvm/bin/clang++"
  export SDKROOT="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk"
  export CFLAGS="-isysroot ${SDKROOT}"
  export CXXFLAGS="-isysroot ${SDKROOT}"
  export LDFLAGS="-L${HOMEBREW_PREFIX}/opt/llvm/lib/c++ -Wl,-rpath,${HOMEBREW_PREFIX}/opt/llvm/lib/c++"
}
# Defer C++ environment setup - will be loaded after prompt
zsh-defer _setup_cpp_env

# ============================================================================
# Shell Management Functions (Critical - Must Load Immediately)
# ============================================================================
# These functions manage shell configuration and must be available immediately.
# They cannot be deferred because they're needed for interactive shell management.
# Dependencies: chezmoi, sed, tmux/zellij (optional)
# ============================================================================

# ============================================================================
# Multiplexer Abstraction Layer
# ============================================================================
# Detect current multiplexer from chezmoi config
# Returns: "tmux" or "zellij" (defaults to tmux)
get-multiplexer() {
  # Environment variable override
  if [[ -n "${MULTIPLEXER:-}" ]]; then
    echo "$MULTIPLEXER"
    return 0
  fi

  # Read from chezmoi config
  local chezmoi_config="${HOME}/.config/chezmoi/chezmoi.toml"
  if [[ -f "$chezmoi_config" ]]; then
    local mux=$(grep -A 1 '^\[data\.zsh\]' "$chezmoi_config" 2>/dev/null | \
                grep 'multiplexer' | \
                command sed 's/.*"\(.*\)".*/\1/')
    if [[ -n "$mux" ]]; then
      echo "$mux"
      return 0
    fi
  fi

  # Default to tmux
  echo "tmux"
}

# Check if running inside a multiplexer
in-multiplexer() {
  [[ -n "${TMUX:-}" || -n "${ZELLIJ:-}" ]]
}

# Get current multiplexer type (when inside one)
current-multiplexer() {
  if [[ -n "${TMUX:-}" ]]; then
    echo "tmux"
  elif [[ -n "${ZELLIJ:-}" ]]; then
    echo "zellij"
  else
    echo "none"
  fi
}

# Kill current window (abstracted)
mux-kill-window() {
  local mux=$(current-multiplexer)
  case "$mux" in
    tmux)
      local id
      id="$(tmux display -p '#{window_id}' 2>/dev/null)" || {
        echo "Run inside tmux session" >&2; return 1
      }
      tmux kill-window -t "$id"
      ;;
    zellij)
      zellij action close-tab
      ;;
    *)
      echo "Not inside a multiplexer session" >&2
      return 1
      ;;
  esac
}

# Note: twk is now an alias to mux-kill-window (see 05-aliases.zsh)

# Clear zsh caches and restart
zsh-refresh() {
  echo "Clearing sheldon cache..."
  command rm -f "${XDG_CACHE_HOME:-$HOME/.cache}/sheldon/sheldon.zsh"
  echo "Clearing completion cache..."
  command rm -f "${ZDOTDIR:-$HOME}/.zcompdump"
  echo "Restarting zsh..."
  exec zsh
}

# Switch between Starship and Powerlevel10k
switch-prompt() {
  local theme="${1:-}"
  local zshenv_local="${ZDOTDIR:-$HOME}/.zshenv.local"

  if [[ -z "$theme" ]]; then
    echo "Current prompt: $PROMPT_THEME"
    echo ""
    echo "Usage: switch-prompt [starship|p10k]"
    echo ""
    echo "Performance (zsh-bench):"
    echo "  P10k:     first_prompt=45.9ms, command=42.9ms  (faster)"
    echo "  Starship: first_prompt=83.5ms, command=83.8ms  (cross-shell)"
    return 0
  fi

  if [[ "$theme" != "starship" && "$theme" != "p10k" ]]; then
    echo "Error: theme must be 'starship' or 'p10k'" >&2
    return 1
  fi

  echo "# Prompt theme override (managed by switch-prompt command)" > "$zshenv_local"
  echo "export PROMPT_THEME=$theme" >> "$zshenv_local"

  echo "✅ Prompt switched to: $theme"
  echo "📝 Saved to: ~/.zshenv.local (not in chezmoi)"
  echo "🔄 Restarting zsh..."
  exec zsh
}

# Switch between modular and monolithic zsh configuration
# Similar to LazyVim/AstroNvim or Starship/P10k switching
switch-zsh-config() {
  local variant="${1:-}"
  local chezmoi_config="${HOME}/.local/share/chezmoi/.chezmoi.toml.tmpl"

  if [[ -z "$variant" ]]; then
    # Show current configuration
    local current_variant=$(grep -A1 '^\[data\.zsh\]' "$chezmoi_config" 2>/dev/null | grep 'variant' | command sed 's/.*"\(.*\)".*/\1/')
    echo "Current zsh configuration: ${current_variant:-modular}"
    echo ""
    echo "Usage: switch-zsh-config [modular|monolithic]"
    echo ""
    echo "Available variants:"
    echo "  modular     - Optimized multi-file config with deferred loading (default)"
    echo "                Performance: 48.7ms min, 55.1ms avg"
    echo "                Structure: ~/.config/zsh/conf.d/ (7 modules)"
    echo ""
    echo "  monolithic  - Traditional single-file config (legacy)"
    echo "                Performance: ~57ms baseline"
    echo "                Structure: Single ~/.zshrc file"
    return 0
  fi

  if [[ "$variant" != "modular" && "$variant" != "monolithic" ]]; then
    echo "Error: variant must be 'modular' or 'monolithic'" >&2
    return 1
  fi

  # Update .chezmoi.toml.tmpl
  if [[ ! -f "$chezmoi_config" ]]; then
    echo "Error: chezmoi config not found at $chezmoi_config" >&2
    return 1
  fi

  # Use sed to update the variant value (use command to bypass alias)
  command sed -i '' "s/variant = \".*\"/variant = \"$variant\"/" "$chezmoi_config"

  echo "✅ Zsh configuration switched to: $variant"
  echo "📝 Updated: ~/.local/share/chezmoi/.chezmoi.toml.tmpl"
  echo "🔄 Regenerating config..."

  # Regenerate config from template
  chezmoi init > /dev/null 2>&1

  echo "🔄 Applying changes..."

  # Apply changes
  chezmoi apply ~/.config/zsh/.zshrc > /dev/null 2>&1

  echo "🔄 Restarting zsh..."
  exec zsh
}

# Switch between tmux and zellij
switch-multiplexer() {
  local mux="${1:-}"
  local chezmoi_config="${HOME}/.local/share/chezmoi/.chezmoi.toml.tmpl"

  if [[ -z "$mux" ]]; then
    # Show current configuration
    local current_mux=$(grep 'multiplexer' "$chezmoi_config" 2>/dev/null | command sed 's/.*"\(.*\)".*/\1/')
    echo "Current multiplexer: ${current_mux:-tmux}"
    echo ""
    echo "Usage: switch-multiplexer [tmux|zellij]"
    echo ""
    echo "Available multiplexers:"
    echo "  tmux     - Traditional terminal multiplexer (default)"
    echo "             Mature, stable, extensive ecosystem"
    echo "             Ctrl+g prefix (custom)"
    echo ""
    echo "  zellij   - Modern Rust-based multiplexer"
    echo "             Built-in UI, WebAssembly plugins"
    echo "             Ctrl+g prefix (matches tmux)"
    return 0
  fi

  if [[ "$mux" != "tmux" && "$mux" != "zellij" ]]; then
    echo "Error: multiplexer must be 'tmux' or 'zellij'" >&2
    return 1
  fi

  # Update .chezmoi.toml.tmpl
  if [[ ! -f "$chezmoi_config" ]]; then
    echo "Error: chezmoi config not found at $chezmoi_config" >&2
    return 1
  fi

  # Use sed to update the multiplexer value (use command to bypass alias)
  command sed -i '' "s/multiplexer = \".*\"/multiplexer = \"$mux\"/" "$chezmoi_config"

  echo "✅ Multiplexer switched to: $mux"
  echo "📝 Updated: ~/.local/share/chezmoi/.chezmoi.toml.tmpl"
  echo "🔄 Regenerating config..."

  # Regenerate config from template
  chezmoi init > /dev/null 2>&1

  echo "🔄 Applying terminal emulator configs..."

  # Apply terminal emulator configurations
  chezmoi apply ~/.config/alacritty/alacritty.toml > /dev/null 2>&1
  chezmoi apply ~/.config/kitty/kitty.conf > /dev/null 2>&1
  chezmoi apply ~/.config/ghostty/config > /dev/null 2>&1

  echo "💡 Restart your terminal emulator to use $mux"
  echo "   Or run: exec zsh"
}

# ============================================================================
# GitHub Integration (1Password)
# ============================================================================
# Fallback pattern: env variable → chezmoi data → 1Password
# GITHUB_TOKEN is used by: gh CLI, git, chezmoi GitHub functions, GitHub Copilot CLI
{{- if or (env "GITHUB_TOKEN") .github_token }}
export GITHUB_TOKEN="{{ or (env "GITHUB_TOKEN") .github_token }}"
{{- end }}
