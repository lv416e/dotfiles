#!/usr/bin/env bash
set -euo pipefail

# ===== Config（環境変数で上書き可）=====
SESSION_DEFAULT="${SESSION_DEFAULT:-desk}"
LEFT_DIR="${LEFT_DIR:-$HOME/Documents}"

# 上段ペイン数: 2 または 1
TOP_PANES="${TOP_PANES:-2}"          # 2=上段左右(Nushell x2) / 1=上段フル幅1ペイン
TOP_SPLIT="${TOP_SPLIT:-55}"         # 上段が2ペイン時の左右比[%]

# 下段の高さ（行数 or 比率）
BOTTOM_LINES="${BOTTOM_LINES:-}"     # 例: BOTTOM_LINES=18
BOTTOM_PCT_DEFAULT=24                # 旧LAYOUT相当（76行中18≒24%）

# 右下の左右比（tty-clock 側=新規ペインの幅[%]）
RIGHT_BOTTOM_SPLIT="${RIGHT_BOTTOM_SPLIT:-55}"

CLAUDE_PLAN="${CLAUDE_PLAN:-max5}"
FORCE="${FORCE:-0}"

ANIMALS=(
  "tiger" "leopard" "lion" "panther" "jaguar" "cheetah"
  "wolf" "fox" "bear" "eagle" "hawk" "falcon" "giraffe"
  "dolphin" "whale" "shark" "octopus" "turtle" "seal"
  "cobra" "viper" "dragon" "phoenix" "griffin" "unicorn"
)

generate_random_name() {
  local base="${ANIMALS[$RANDOM % ${#ANIMALS[@]}]}"
  local suffix=$((RANDOM % 10))
  echo "${base}-${suffix}"
}

# ===== Window名 =====
if [[ -n "${1:-}" ]]; then
  WINDOW="$1"; ALLOW_DUPLICATE="${ALLOW_DUPLICATE:-0}"
else
  WINDOW=$(generate_random_name); ALLOW_DUPLICATE=1
fi

# ===== Session =====
if [[ -n "${TMUX-}" ]]; then
  SESSION="$(tmux display -p '#S')"
else
  SESSION="$SESSION_DEFAULT"
  tmux has-session -t "$SESSION" 2>/dev/null || tmux new-session -d -s "$SESSION" -n tmp
fi

# ===== Duplicate handling =====
if [[ "$ALLOW_DUPLICATE" == "0" ]]; then
  EXIST_ID="$(tmux list-windows -t "$SESSION" -F '#{window_name} #{window_id}' \
    | awk -v w="$WINDOW" '$1==w{print $2}')"
  if [[ -n "${EXIST_ID:-}" ]]; then
    if [[ "$FORCE" == "1" ]]; then
      tmux kill-window -t "$EXIST_ID"
    else
      COUNT=2; ORIGINAL_WINDOW="$WINDOW"
      while tmux list-windows -t "$SESSION" -F '#{window_name}' | grep -q "^${WINDOW}$"; do
        WINDOW="${ORIGINAL_WINDOW}-${COUNT}"; COUNT=$((COUNT + 1))
      done
      echo "Window '$ORIGINAL_WINDOW' exists. Creating as '$WINDOW' instead." >&2
    fi
  fi
fi

# ===== Create window =====
echo "creating window: $WINDOW" >&2
WINID="$(tmux new-window -P -F '#{window_id}' -t "${SESSION}:" -n "$WINDOW")"

# 下段の高さ[%]を決定（行数があれば優先）
WINH="$(tmux display -p -t "$WINID" '#{window_height}')"
if [[ -n "${BOTTOM_LINES}" ]]; then
  bp=$(( (BOTTOM_LINES * 100 + WINH/2) / WINH ))
  (( bp < 5 ))  && bp=5
  (( bp > 95 )) && bp=95
  BOTTOM_PCT="$bp"
else
  BOTTOM_PCT="${BOTTOM_PCT:-$BOTTOM_PCT_DEFAULT}"
fi

# ===== Pane graph =====
# 1) 上下に分割
TOP="$(tmux display -p -t "${WINID}.0" '#{pane_id}')"
BOT="$(tmux split-window -v -p "$BOTTOM_PCT" -t "$TOP" -P -F '#{pane_id}')"

# 2) 上段：TOP_PANES に応じて分割
RTOP=""
if [[ "$TOP_PANES" -eq 2 ]]; then
  RTOP="$(tmux split-window -h -p "$TOP_SPLIT" -t "$TOP" -P -F '#{pane_id}')"
  LTOP="$TOP"
else
  # 上段は1ペイン（フル幅）
  LTOP="$TOP"
fi

# 3) 下段：右をさらに左右へ（tty-clock側を新規作成）
RB1="$(tmux split-window -h -p 50 -t "$BOT" -P -F '#{pane_id}')"
LBOT="$BOT"
RBR="$(tmux split-window -h -p "$RIGHT_BOTTOM_SPLIT" -t "$RB1" -P -F '#{pane_id}')"
RBL="$RB1"

# ===== Commands =====
# 上段 Nushell
if command -v nu >/dev/null 2>&1; then
  tmux respawn-pane -k -t "$LTOP" "cd \"${LEFT_DIR}\" && exec nu"
  if [[ -n "$RTOP" ]]; then
    tmux respawn-pane -k -t "$RTOP" "cd \"${LEFT_DIR}\" && exec nu"
  fi
else
  # Nushellが見つからない場合はzshにフォールバック
  tmux respawn-pane -k -t "$LTOP" "cd \"${LEFT_DIR}\" && echo '[warn] nushell not found, falling back to zsh' && exec zsh"
  if [[ -n "$RTOP" ]]; then
    tmux respawn-pane -k -t "$RTOP" "cd \"${LEFT_DIR}\" && echo '[warn] nushell not found, falling back to zsh' && exec zsh"
  fi
fi

# 下段 左: claude-monitor
if command -v claude-monitor >/dev/null 2>&1; then
  tmux respawn-pane -k -t "$LBOT" "claude-monitor --plan ${CLAUDE_PLAN}"
else
  # claude-monitorがなければnushellを起動
  if command -v nu >/dev/null 2>&1; then
    tmux respawn-pane -k -t "$LBOT" "cd \"${LEFT_DIR}\" && exec nu"
  else
    tmux respawn-pane -k -t "$LBOT" "bash -lc 'echo \"[warn] claude-monitor not found\"; exec zsh'"
  fi
fi

# 下段 右: 左= btm/htop/top, 右= tty-clock or watch date
tmux respawn-pane -k -t "$RBL"  "bash -lc 'btm || htop || top'"
if command -v tty-clock >/dev/null 2>&1; then
  tmux respawn-pane -k -t "$RBR" "tty-clock -sc"
else
  tmux respawn-pane -k -t "$RBR" "watch -n 1 \"date +%H:%M:%S\""
fi

# 初期フォーカスは上段
tmux select-window -t "${WINID}"
tmux select-pane   -t "$LTOP"

# 安定化（必要なら）
tmux respawn-pane -k -t "$LTOP"
tmux respawn-pane -k -t "$LBOT"

# アタッチ（tmux外）
if [[ -z "${TMUX-}" ]]; then tmux attach -t "$SESSION"; fi
