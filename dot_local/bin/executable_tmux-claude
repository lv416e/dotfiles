#!/usr/bin/env bash
set -euo pipefail

# Config (can override with env vars)
SESSION_DEFAULT="${SESSION_DEFAULT:-desk}"
LEFT_DIR="${LEFT_DIR:-$HOME/Documents}"

# Bottom pane height: specify as lines or percentage
BOTTOM_LINES="${BOTTOM_LINES:-}"
BOTTOM_PCT_DEFAULT=24
RIGHT_BOTTOM_SPLIT="${RIGHT_BOTTOM_SPLIT:-40}"

CLAUDE_PLAN="${CLAUDE_PLAN:-max5}"
FORCE="${FORCE:-0}"

ANIMALS=(
  "tiger" "leopard" "lion" "panther" "jaguar" "cheetah"
  "wolf" "fox" "bear" "eagle" "hawk" "falcon" "giraffe"
  "dolphin" "whale" "shark" "octopus" "turtle" "seal"
  "cobra" "viper" "dragon" "phoenix" "griffin" "unicorn"
)

generate_random_name() {
  local base="${ANIMALS[$RANDOM % ${#ANIMALS[@]}]}"
  local suffix=$((RANDOM % 10))
  echo "${base}-${suffix}"
}

# Window name
if [[ -n "${1:-}" ]]; then
  WINDOW="$1"
  ALLOW_DUPLICATE="${ALLOW_DUPLICATE:-0}"
else
  WINDOW=$(generate_random_name)
  ALLOW_DUPLICATE=1
fi

# Session
if [[ -n "${TMUX-}" ]]; then
  SESSION="$(tmux display -p '#S')"
else
  SESSION="$SESSION_DEFAULT"
  tmux has-session -t "$SESSION" 2>/dev/null || tmux new-session -d -s "$SESSION" -n tmp
fi

# Duplicate handling
if [[ "$ALLOW_DUPLICATE" == "0" ]]; then
  EXIST_ID="$(tmux list-windows -t "$SESSION" -F '#{window_name} #{window_id}' |
    awk -v w="$WINDOW" '$1==w{print $2}')"
  if [[ -n "${EXIST_ID:-}" ]]; then
    if [[ "$FORCE" == "1" ]]; then
      tmux kill-window -t "$EXIST_ID"
    else
      COUNT=2
      ORIGINAL_WINDOW="$WINDOW"
      while tmux list-windows -t "$SESSION" -F '#{window_name}' | grep -q "^${WINDOW}$"; do
        WINDOW="${ORIGINAL_WINDOW}-${COUNT}"
        COUNT=$((COUNT + 1))
      done
      echo "Window '$ORIGINAL_WINDOW' exists. Creating as '$WINDOW' instead." >&2
    fi
  fi
fi

# Create window
echo "creating window: $WINDOW" >&2
WINID="$(tmux new-window -P -F '#{window_id}' -t "${SESSION}:" -n "$WINDOW")"

# Calculate BOTTOM_PCT from terminal height (lines take priority)
WINH="$(tmux display -p -t "$WINID" '#{window_height}')"
if [[ -n "${BOTTOM_LINES}" ]]; then
  bp=$(((BOTTOM_LINES * 100 + WINH / 2) / WINH))
  ((bp < 5)) && bp=5
  ((bp > 95)) && bp=95
  BOTTOM_PCT="$bp"
else
  BOTTOM_PCT="${BOTTOM_PCT:-$BOTTOM_PCT_DEFAULT}"
fi

# Pane layout
TOP="$(tmux display -p -t "${WINID}.0" '#{pane_id}')"
BOT="$(tmux split-window -v -p "$BOTTOM_PCT" -t "$TOP" -P -F '#{pane_id}')"

RTOP="$(tmux split-window -h -p 58 -t "$TOP" -P -F '#{pane_id}')"
LTOP="$TOP"

RB1="$(tmux split-window -h -p 58 -t "$BOT" -P -F '#{pane_id}')"
LBOT="$BOT"

RBR="$(tmux split-window -h -p "$RIGHT_BOTTOM_SPLIT" -t "$RB1" -P -F '#{pane_id}')"
RBL="$RB1"

# Commands
tmux respawn-pane -k -t "$LTOP" "zsh -lc ' \
  cd -- \"$LEFT_DIR\" 2>/dev/null || cd ~; \
  nvim; \
  exec zsh \
'"
tmux respawn-pane -k -t "$RTOP" "zsh -lc ' \
  cd -- \"$LEFT_DIR\" 2>/dev/null || cd ~; \
  claude; \
  exec zsh \
'"
# Set pane title for promptq detection
tmux select-pane -t "$RTOP" -T "claude"

if command -v claude-monitor >/dev/null 2>&1; then
  tmux respawn-pane -k -t "$LBOT" "claude-monitor --plan ${CLAUDE_PLAN}"
else
  tmux respawn-pane -k -t "$LBOT" "bash -lc 'echo \"[warn] claude-monitor not found\"; exec zsh'"
fi

# tmux respawn-pane -k -t "$RBL" "bash -lc 'btm || htop || top'"
tmux respawn-pane -k -t "$RBL" "zsh -lc '
  DIR=\"$LEFT_DIR\"
  if ! command -v gitui >/dev/null 2>&1; then
    echo \"[warn] gitui not found. e.g. brew install gitui\"; exec zsh
  fi
  ROOT=\$(git -C \"\$DIR\" rev-parse --show-toplevel 2>/dev/null || echo \"\$DIR\")
  cd \"\$ROOT\"
  gitui; exec zsh
'"
tmux respawn-pane -k -t "$RBR" "bash -lc 'btm || htop || top'"

# Initial focus
tmux select-window -t "${WINID}"
tmux select-pane -t "$RTOP"

# Stabilize
# tmux respawn-pane -k -t "$LTOP"
# tmux respawn-pane -k -t "$LBOT"

# Attach if not in tmux
if [[ -z "${TMUX-}" ]]; then tmux attach -t "$SESSION"; fi
