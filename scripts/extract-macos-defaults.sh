#!/bin/bash
# ==============================================================================
# macOS Defaults Extraction Script
# ==============================================================================
# This script extracts current macOS system preferences and converts them
# to `defaults write` commands for use in chezmoi dotfiles management.
#
# Usage:
#   ./scripts/extract-macos-defaults.sh [output_file]
#
# Output:
#   Generates a shell script with defaults write commands
#   Default location: .chezmoitemplates/macos-defaults-discovered.sh
# ==============================================================================

set -eufo pipefail

# ==============================================================================
# Configuration
# ==============================================================================

OUTPUT_FILE="${1:-.chezmoitemplates/macos-defaults-discovered.sh}"
REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# ==============================================================================
# Helper Functions
# ==============================================================================

# Detect type of a defaults value and format appropriately
detect_and_format_value() {
    local domain="$1"
    local key="$2"
    local value="$3"

    # Skip complex types (arrays, dicts) - these need manual handling
    if [[ "$value" =~ ^\( || "$value" =~ ^\{ ]]; then
        echo "# TODO: Complex value for $key - requires manual handling"
        return
    fi

    # Boolean values (0/1, true/false, YES/NO)
    if [[ "$value" =~ ^[01]$ ]] || [[ "$value" =~ ^(true|false|YES|NO)$ ]]; then
        local bool_value="false"
        [[ "$value" == "1" || "$value" == "true" || "$value" == "YES" ]] && bool_value="true"
        echo "defaults write $domain \"$key\" -bool $bool_value"
        return
    fi

    # Integer values
    if [[ "$value" =~ ^-?[0-9]+$ ]]; then
        echo "defaults write $domain \"$key\" -int $value"
        return
    fi

    # Float values
    if [[ "$value" =~ ^-?[0-9]+\.[0-9]+$ ]]; then
        echo "defaults write $domain \"$key\" -float $value"
        return
    fi

    # Default to string
    echo "defaults write $domain \"$key\" -string \"$value\""
}

# Extract settings from a domain
extract_domain_settings() {
    local domain="$1"
    local section_name="$2"

    echo ""
    echo "# ============================================================================"
    echo "# $section_name"
    echo "# ============================================================================"

    # Get all key-value pairs
    defaults read "$domain" 2>/dev/null | \
        grep -E '^\s+"?[^"]+"\s*=' | \
        while IFS= read -r line; do
            # Extract key and value
            if [[ "$line" =~ ^[[:space:]]*\"?([^\"]+)\"?[[:space:]]*=[[:space:]]*(.+)\;$ ]]; then
                key="${BASH_REMATCH[1]}"
                value="${BASH_REMATCH[2]}"
                # Remove quotes from value
                value="${value//\"/}"
                value="${value//;/}"
                value="$(echo "$value" | xargs)"

                # Skip empty values
                [[ -z "$value" ]] && continue

                detect_and_format_value "$domain" "$key" "$value"
            fi
        done
}

# ==============================================================================
# Main Script
# ==============================================================================

main() {
    echo "üìù Extracting macOS defaults settings..."
    echo ""
    echo "This will extract your current macOS system preferences"
    echo "and generate a defaults write script."
    echo ""

    # Create output file
    cat > "$REPO_ROOT/$OUTPUT_FILE" << 'HEADER'
#!/bin/bash
# ==============================================================================
# macOS System Preferences (Auto-discovered)
# ==============================================================================
# This file was automatically generated by scripts/extract-macos-defaults.sh
#
# IMPORTANT: Review and customize this file before using it!
# - Remove settings you don't want to version control
# - Adjust values as needed
# - Add comments to explain non-obvious settings
# ==============================================================================

set -eufo pipefail

echo "üîß Applying macOS system preferences..."

HEADER

    # Extract Dock settings
    {
        extract_domain_settings "com.apple.dock" "Dock"
    } >> "$REPO_ROOT/$OUTPUT_FILE"

    # Extract Finder settings
    {
        extract_domain_settings "com.apple.finder" "Finder"
    } >> "$REPO_ROOT/$OUTPUT_FILE"

    # Extract Global preferences
    {
        extract_domain_settings "NSGlobalDomain" "Global Preferences (Keyboard, Trackpad, etc.)"
    } >> "$REPO_ROOT/$OUTPUT_FILE"

    # Extract Screenshot settings
    {
        extract_domain_settings "com.apple.screencapture" "Screenshots"
    } >> "$REPO_ROOT/$OUTPUT_FILE"

    # Extract Safari settings (if Safari has been configured)
    if defaults read com.apple.Safari &>/dev/null; then
        {
            extract_domain_settings "com.apple.Safari" "Safari"
        } >> "$REPO_ROOT/$OUTPUT_FILE"
    fi

    # Add application restart section
    cat >> "$REPO_ROOT/$OUTPUT_FILE" << 'FOOTER'

# ==============================================================================
# Restart Affected Applications
# ==============================================================================
echo "üîÑ Restarting affected applications..."

for app in \
    "Dock" \
    "Finder" \
    "SystemUIServer" \
    "Safari"; do
    killall "${app}" &>/dev/null || true
done

echo "‚úÖ macOS system preferences applied successfully"
echo ""
echo "‚ö†Ô∏è  Some changes may require a logout/restart to take full effect"
FOOTER

    chmod +x "$REPO_ROOT/$OUTPUT_FILE"

    echo "‚úÖ Extraction complete!"
    echo ""
    echo "üìÑ Generated file: $OUTPUT_FILE"
    echo ""
    echo "üìù Next steps:"
    echo "   1. Review the generated file: cat $OUTPUT_FILE"
    echo "   2. Remove unwanted settings"
    echo "   3. Copy desired settings to run_onchange_before_configure-macos.sh.tmpl"
    echo "   4. Test with: chezmoi apply --dry-run"
}

# ==============================================================================
# Script Entry Point
# ==============================================================================

# Check if running on macOS
if [[ "$(uname)" != "Darwin" ]]; then
    echo "‚ùå Error: This script only works on macOS"
    exit 1
fi

main "$@"
