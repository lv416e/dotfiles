# Q pre block. Keep at the top of this file.
[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh" ]] && builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh"
{{- if eq .chezmoi.arch "arm64" }}
eval "$(/opt/homebrew/bin/brew shellenv)"
HOMEBREW_PREFIX="/opt/homebrew"
{{- else }}
eval "$(/usr/local/bin/brew shellenv)"
HOMEBREW_PREFIX="/usr/local"
{{- end }}

# Prompt configuration
# Set PROMPT_THEME to either "starship" or "p10k"
# To switch to Powerlevel10k, uncomment the line below:
# export PROMPT_THEME=p10k
export PROMPT_THEME="${PROMPT_THEME:-starship}"

if [[ "$PROMPT_THEME" == "p10k" ]]; then
  # Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
  # Initialization code that may require console input (password prompts, [y/n]
  # confirmations, etc.) must go above this block; everything else may go below.
  if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
  fi
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# cheat sheet function
# ch() { cheat $* | bat --style=plain -l sh }
ch() { cheat $* | bat --paging=never -l sh }

# code serch function
agg() { ag $* | bat -l sh }

# jgrep function
jgrep() { jq | gron | grep $* | gron -u }

# history grep function
hg() { history -1000 | grep $* | tail -r | bat -l sh }
hc() { history -1000 | awk -v cmd="$1" '$1 == cmd { $1=""; sub(/^ +/, ""); print; exit }' | tr -d '\n' | pbcopy }

# Prompt initialization
if [[ "$PROMPT_THEME" == "starship" ]]; then
  # Starship
  eval "$(starship init zsh)"
  export STARSHIP_CONFIG=~/.config/starship.toml
elif [[ "$PROMPT_THEME" == "p10k" ]]; then
  # Powerlevel10k
  source ~/.oh-my-zsh/custom/themes/powerlevel10k/powerlevel10k.zsh-theme
  # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
  [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
fi

# Alias
alias la='ls -al'
alias ll='ls -l'
alias vim='nvim'
alias vi='nvim'
alias v='nvim'
# eza (modern replacement for exa)
alias e='eza --icons --git --sort=type'
alias l=e
alias ls=e
alias ea='eza -a --icons --git --sort=type'
alias la=ea
alias ee='clear & eza -aahl --icons --git --sort=type'
alias ll=ee
alias et='eza -T -L 3 -a -I "node_modules|.git|.cache" --icons --sort=type'
alias lt=et
alias eta='eza -T -a -I "node_modules|.git|.cache" --color=always --icons --sort=type | less -r'
alias lta=eta
alias l='clear && ll'
# monitoring
alias top='btm'
alias bottom='btm'
# cat and less
alias less='bat'
alias cat='bat --paging=never'
# grep
alias grep='rg -S'
alias -g G='| rg -S'
# change directory
alias d='cd ~/Documents'
alias dot='cd ~/.local/share/chezmoi'
alias obs='cd ~/Google\ Drive/My\ Drive/obsidian/'
alias ..1='cd ../'
alias ..2='cd ../../'
alias ..3='cd ../../../'
alias ..4='cd ../../../../'
# history
alias h1='history -100 | tail -r | bat -l sh'
alias h10='history -1000 | tail -r | bat -l sh'
# others
alias c='clear'
alias du='dust'
alias df='duf'
alias ps='procs --tree'
alias rm='trash'
alias cl='tty-clock -sc'
alias tenki='http wttr.in/Tokyo'
alias twork='tmux-work'
alias tw='tmux-work'
alias tcc='tmux-claude'
alias tc='tmux-claude'
alias tvim='tmux-nvim'
alias tv='tmux-nvim'
alias tnu='tmux-nu'
alias tn='tmux-nu'
# nushell (experimental)
alias nu='nu'
alias nuscript='nu -c'
alias vnu='chezmoi edit ~/.config/nushell/config.nu'
# chezmoi
alias vzsh='chezmoi edit ~/.zshrc'
alias vbrew='chezmoi edit ~/.Brewfile'
alias szsh='source ~/.zshrc'
alias cdot='chezmoi cd'
alias adot='chezmoi apply'
# git
alias lg='gitui'
alias ld='lazydocker'

# zoxide
eval "$(zoxide init --cmd j zsh)"

# atuin - magical shell history
eval "$(atuin init zsh)"

# fzf configuration
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
export FZF_DEFAULT_OPTS='
  --height 40%
  --layout=reverse
  --border
  --preview "bat --color=always --style=numbers --line-range=:500 {}"
'

# mise (unified version management for node, python, go, ruby, etc.)
eval "$(mise activate zsh)"

# Python environment (replaced by mise)
# export PYENV_ROOT="$HOME/.pyenv"
# export PATH="$PYENV_ROOT/bin:$PATH"
# eval "$(pyenv init -)"

# Node.js (replaced by mise)
# export PATH=$HOME/.nodebrew/current/bin:$PATH

# Slack CLI
export PATH="{{ .chezmoi.homeDir }}/.slack/bin:$PATH"

# mask task runner
export PATH="{{ .chezmoi.homeDir }}/.cargo/bin:$PATH"

# direnv
eval "$(direnv hook zsh)"

# mysql
# Note: LDFLAGS commented out as it causes Ruby build errors
# export LDFLAGS="-L/usr/local/opt/mysql-client/lib"
# export CPPFLAGS="-I/usr/local/opt/mysql-client/include"
export PATH="${HOMEBREW_PREFIX}/opt/mysql-client/bin:$PATH"
export PATH="${HOMEBREW_PREFIX}/opt/libpq/bin:$PATH"
# export DYLD_LIBRARY_PATH=/usr/local/lib:$DYLD_LIBRARY_PATH
# export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

# JAVA
export JAVA_HOME=`/usr/libexec/java_home -v 11`

# C++ Development (LLVM/Clang for C++23)
export PATH="${HOMEBREW_PREFIX}/opt/llvm/bin:$PATH"
export CC="${HOMEBREW_PREFIX}/opt/llvm/bin/clang"
export CXX="${HOMEBREW_PREFIX}/opt/llvm/bin/clang++"
export SDKROOT="$(xcrun --show-sdk-path)"
export CFLAGS="-isysroot ${SDKROOT}"
export CXXFLAGS="-isysroot ${SDKROOT}"
export LDFLAGS="-L${HOMEBREW_PREFIX}/opt/llvm/lib/c++ -Wl,-rpath,${HOMEBREW_PREFIX}/opt/llvm/lib/c++"

# solver
export PMIP_CBC_LIBRARY="/usr/local/lib/libCbc.dylib"
export LD_LIBRARY_PATH="/home/haroldo/prog/lib/":$LD_LIBRARY_PATH

# HSL for IPOPT
export METIS_HEADER=${HOMEBREW_PREFIX}/Cellar/metis/5.1.0/include
export METIS_LIBRARY=${HOMEBREW_PREFIX}/Cellar/metis/5.1.0/lib
export MYAPPS=${HOME}/UserApps/IPOPT/HSL/hsl_install
export MYLIB=${MYAPPS}/lib
export DYLD_LIBRARY_PATH=${DYLD_LIBRARY_PATH}:${MYLIB}

# Alacritty + Hammerspoon
DOTDIR='{{ .chezmoi.homeDir }}/dotfiles'
export PATH=$PATH:$DOTDIR/.config/alacritty/bin

# gnu-time
export PATH="${HOMEBREW_PREFIX}/opt/gnu-time/libexec/gnubin:$PATH"

# sheldon - zsh plugin manager
eval "$(sheldon source)"

# fzf key bindings and fuzzy completion (loaded via Homebrew)
if [[ -f "${HOMEBREW_PREFIX}/opt/fzf/shell/key-bindings.zsh" ]]; then
  zsh-defer source "${HOMEBREW_PREFIX}/opt/fzf/shell/key-bindings.zsh"
fi
if [[ -f "${HOMEBREW_PREFIX}/opt/fzf/shell/completion.zsh" ]]; then
  zsh-defer source "${HOMEBREW_PREFIX}/opt/fzf/shell/completion.zsh"
fi

# Q post block. Keep at the bottom of this file.
[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh" ]] && builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh"

# Kill current tmux window (only when inside tmux)
twk() {
  local id
  id="$(tmux display -p '#{window_id}' 2>/dev/null)" || {
    echo "Run inside tmux session" >&2; return 1
  }
  tmux kill-window -t "$id"
}

# ghq + fzf integration
# Quick repository navigation with fzf
# Usage: repo [--tmux|-t]
#   repo       - Select and cd to repository
#   repo -t    - Select, cd, and launch tmux-work
repo() {
  local launch_tmux=false

  # Parse arguments
  if [[ "$1" == "--tmux" || "$1" == "-t" ]]; then
    launch_tmux=true
  fi

  local repo=$(ghq list | fzf --preview "bat --color=always --style=header,grid $(ghq root)/{}/README.md 2>/dev/null || eza -al --tree --level=2 $(ghq root)/{}")
  if [ -n "$repo" ]; then
    local repo_path=$(ghq root)/$repo

    if [ "$launch_tmux" = true ]; then
      # Launch tmux without changing current directory
      local repo_name=$(basename "$repo")
      LEFT_DIR="$repo_path" tmux-work "$repo_name"
    else
      # Change directory only when not launching tmux
      cd "$repo_path"
    fi
  fi
}

# Clone repository with ghq and cd into it
clone() {
  if [ -z "$1" ]; then
    echo "Usage: clone <repo-url>" >&2
    echo "Example: clone github.com/anthropics/claude-code" >&2
    return 1
  fi
  ghq get "$1" && cd $(ghq root)/$(ghq list | tail -1)
}

# Repository navigation with tmux-work integration
# Usage: tmux-repo [repo-name]
#   tmux-repo         - If in ghq repo: launch tmux-work here
#                       Otherwise: select with fzf
#   tmux-repo <name>  - Select specific repo (fuzzy match)
tmux-repo() {
  local repo_path=""
  local repo_name=""

  if [ -n "$1" ]; then
    # Argument provided: fuzzy match
    local matched=$(ghq list | grep -i "$1" | head -1)
    if [ -n "$matched" ]; then
      repo_path=$(ghq root)/$matched
      repo_name=$(basename "$matched")
    else
      echo "No repository matching '$1' found" >&2
      return 1
    fi
  else
    # No argument: check if current dir is in ghq
    local current_path=$(pwd)
    local ghq_root=$(ghq root)

    if [[ "$current_path" == "$ghq_root"* ]]; then
      # Already in a ghq repository
      repo_path="$current_path"
      repo_name=$(basename "$current_path")
    else
      # Not in ghq: select with fzf
      local repo=$(ghq list | fzf --preview "bat --color=always --style=header,grid $(ghq root)/{}/README.md 2>/dev/null || eza -al --tree --level=2 $(ghq root)/{}")
      if [ -n "$repo" ]; then
        repo_path=$(ghq root)/$repo
        repo_name=$(basename "$repo")
      else
        return 0
      fi
    fi
  fi

  # Launch tmux-work without changing current directory
  if [ -n "$repo_path" ]; then
    LEFT_DIR="$repo_path" tmux-work "$repo_name"
  fi
}

# Show ghq repository statistics
ghq-stats() {
  echo "Total repositories: $(ghq list | wc -l | tr -d ' ')"
  echo "GitHub: $(ghq list | grep github.com | wc -l | tr -d ' ')"
  echo "GitLab: $(ghq list | grep gitlab.com | wc -l | tr -d ' ')"
  echo "Bitbucket: $(ghq list | grep bitbucket.org | wc -l | tr -d ' ')"
  echo ""
  echo "Most recently updated repositories:"
  ghq list --full-path | head -5 | while read repo_path; do
    local last_commit=$(git -C "$repo_path" log -1 --format='%ar' 2>/dev/null || echo "unknown")
    echo "  $(basename $repo_path): $last_commit"
  done
}
